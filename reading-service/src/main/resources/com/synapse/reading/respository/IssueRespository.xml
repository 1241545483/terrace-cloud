<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.synapse.reading.respository.IssueRespository">

    <select id="selectByPrimaryKey" resultMap="com.synapse.reading.mapper.IssueMapper.BaseResultMap" parameterType="java.lang.String" >
        select
        <include refid="com.synapse.reading.mapper.IssueMapper.Base_Column_List" />
        from `issue`
        where
        `rec_id` = #{recId}
    </select>

    <select id="selectBybelongToId" resultType="map" parameterType="map" >
        select
            a.`rec_id` , a.`content`, a.`belong_to`, a.`belong_to_id`, a.`img1`, a.`img2`, a.`img3`, a.`type`, a.`analysis`, a.`difficulty`, a.`status`, a.`create_id`, a.`create_time`, a.`update_id`, a.`update_time`
            ,b.`rec_id` item_rec_id ,b.`issue_id` ,b.`content` item_content,b.`img1` item_img1,b.`img2` item_img2,b.`img3` item_img3,b.`is_answer`,b.`create_id` item_create_id ,b.`create_time` item_create_time ,b.`update_id` item_update_id ,b.`update_time` item_update_time
        from `issue` a
        JOIN  issue_item b on a.rec_id =b.issue_id
        where
            a.`belong_to_id` = #{recId} AND   a.`belong_to` = #{belongTo} AND a.status='1'  order by a.rec_id ,b.rec_id
    </select>

    <select id="issueRate" resultType="map" parameterType="map" >
        SELECT a.applyTotalNum ,b.joinNum,ROUND(IFNULL(b.joinNum,0)/a.applyTotalNum*100,1) rate FROM (
         select count(*) applyTotalNum from  member a
        join class_student_mapping c on a.user_id = c.student_id
        join task b on b.rec_id = #{taskId}  and b.class_id = c.class_id
        WHERE  1=1)a
            JOIN
            (SELECT count(DISTINCT a.create_id ) joinNum FROM  issue_answer a
                join  issue b on a.issue_id = b.rec_id and b.belong_to ='task' and  b.belong_to_id = #{taskId}
                JOIN  task  c on b.belong_to_id =c.rec_id WHERE 1=1) b
        WHERE 1=1
    </select>


    <select id="selectScoreByUserId" resultType="double" parameterType="map" >

        SELECT
            ROUND( (SUM(if(a.is_answer=1,a.difficulty,0))+ SUM(if(b.is_answer=1,b.difficulty,0))+SUM(if(c.is_answer=1,c.difficulty,0))+SUM(if(d.is_answer=1,d.difficulty,0)))/(SUM(a.difficulty)+SUM(b.difficulty)+SUM(c.difficulty)+SUM(d.difficulty)) ,2)
        FROM
            (SELECT a.content issue ,a.difficulty,b.content item ,b.is_answer,c.rec_id,c.create_id,c.answer
             from issue a
                 LEFT join issue_item b on a.rec_id = b.issue_id
                 JOIN issue_answer c on a.rec_id = c.issue_id AND b.rec_id = c.item_id and c.create_id = #{userId}
             WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type ='single'
             order by a.rec_id,b.rec_id
            ) a
            JOIN
            (SELECT a.content issue ,a.difficulty,'' item ,'1' is_answer ,c.rec_id,c.create_id,c.answer
             from issue a
                 JOIN issue_answer c on a.rec_id = c.issue_id AND c.create_id = #{userId}
             WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type ='answer'
             order by a.rec_id) b
            join
                (SELECT i.rec_id ,i.difficulty ,e.is_answer FROM
                    (
                        SELECT  GROUP_CONCAT(f.answer_id) answer_id ,f.rec_id,f.difficulty
                        FROM
                            (SELECT b.rec_id answer_id , a.rec_id,a.difficulty
                             from issue a
                                 join issue_item b on a.rec_id = b.issue_id  and b.is_answer =1
                             WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type = 'multi'
                             GROUP BY  b.rec_id) f where 1=1 ) i
                    left join
                    ( SELECT  GROUP_CONCAT(g.answer_id) answer_id ,g.rec_id,g.is_answer
                      FROM
                          (SELECT  b.rec_id answer_id  , a.rec_id, '1' is_answer
                           from issue a
                               join issue_item b on a.rec_id = b.issue_id
                               JOIN issue_answer c on a.rec_id = c.issue_id AND b.rec_id = c.item_id and c.create_id = #{userId}
                           WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type ='multi'
                           GROUP BY b.rec_id    )  g where 1=1 ) e  ON i.answer_id= e.answer_id) c
                join
                (SELECT i.rec_id ,i.difficulty ,e.is_answer FROM
                    (
                        SELECT  GROUP_CONCAT(f.answer_id) answer_id ,f.rec_id,f.difficulty
                        FROM
                            (SELECT b.rec_id answer_id , a.rec_id,a.difficulty
                             from issue a
                                 join issue_item b on a.rec_id = b.issue_id  and b.is_answer =1
                             WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type ='draw'
                             GROUP BY  b.rec_id) f where 1=1 ) i
                    left join
                    ( SELECT  GROUP_CONCAT(g.answer_id) answer_id ,g.rec_id,g.is_answer
                      FROM
                          (SELECT  b.rec_id answer_id  , a.rec_id, '1' is_answer
                           from issue a
                               join issue_item b on a.rec_id = b.issue_id
                               JOIN issue_answer c on a.rec_id = c.issue_id AND b.rec_id = c.item_id and c.create_id = #{userId}
                           WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type ='draw'
                           GROUP BY b.rec_id    )  g where 1=1 ) e  ON i.answer_id= e.answer_id) d
        WHERE a.rec_id is not NULL

    </select>

    <select id="selectCountByUserId" resultType="int" parameterType="map" >

        SELECT
            SUM(if(a.is_answer=1,1,0))+ SUM(if(b.is_answer=1,1,0))+SUM(if(c.is_answer=1,1,0)+SUM(if(d.is_answer=1,1,0)))  num
        FROM
            (SELECT a.content issue ,a.difficulty,b.content item ,b.is_answer,c.rec_id,c.create_id,c.answer
             from issue a
                 LEFT join issue_item b on a.rec_id = b.issue_id
                 JOIN issue_answer c on a.rec_id = c.issue_id AND b.rec_id = c.item_id and c.create_id = #{userId}
             WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type ='single'
             order by a.rec_id,b.rec_id
            ) a
            JOIN
            (SELECT a.content issue ,a.difficulty,'' item ,'1' is_answer ,c.rec_id,c.create_id,c.answer
             from issue a
                 JOIN issue_answer c on a.rec_id = c.issue_id AND c.create_id = #{userId}
             WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type ='answer'
             order by a.rec_id) b
            join
            (SELECT i.rec_id ,i.difficulty ,e.is_answer FROM
                (
                    SELECT  GROUP_CONCAT(f.answer_id) answer_id ,f.rec_id,f.difficulty
                    FROM
                        (SELECT b.rec_id answer_id , a.rec_id,a.difficulty
                         from issue a
                             join issue_item b on a.rec_id = b.issue_id  and b.is_answer =1
                         WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type = 'multi'
                         GROUP BY  b.rec_id) f where 1=1 ) i
                left join
                ( SELECT  GROUP_CONCAT(g.answer_id) answer_id ,g.rec_id,g.is_answer
                  FROM
                      (SELECT  b.rec_id answer_id  , a.rec_id, '1' is_answer
                       from issue a
                           join issue_item b on a.rec_id = b.issue_id
                           JOIN issue_answer c on a.rec_id = c.issue_id AND b.rec_id = c.item_id and c.create_id = #{userId}
                       WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type ='multi'
                       GROUP BY b.rec_id    )  g where 1=1 ) e  ON i.answer_id= e.answer_id) c
                join
                (SELECT i.rec_id ,i.difficulty ,e.is_answer FROM
                    (
                        SELECT  GROUP_CONCAT(f.answer_id) answer_id ,f.rec_id,f.difficulty
                        FROM
                            (SELECT b.rec_id answer_id , a.rec_id,a.difficulty
                             from issue a
                                 join issue_item b on a.rec_id = b.issue_id  and b.is_answer =1
                             WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type ='draw'
                             GROUP BY  b.rec_id) f where 1=1 ) i
                    left join
                    ( SELECT  GROUP_CONCAT(g.answer_id) answer_id ,g.rec_id,g.is_answer
                      FROM
                          (SELECT  b.rec_id answer_id  , a.rec_id, '1' is_answer
                           from issue a
                               join issue_item b on a.rec_id = b.issue_id
                               JOIN issue_answer c on a.rec_id = c.issue_id AND b.rec_id = c.item_id and c.create_id = #{userId}
                           WHERE a.belong_to_id=#{belongToId} AND a.belong_to=#{belongTo} AND a.`status`=1 and a.type ='draw'
                           GROUP BY b.rec_id    )  g where 1=1 ) e  ON i.answer_id= e.answer_id) d
        WHERE a.rec_id is not NULL

    </select>

</mapper>
